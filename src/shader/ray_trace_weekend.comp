#version 460

layout(set = 0, binding = 0, rgba8) uniform image2D targetImage;

layout(set = 0, binding = 1) uniform GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
} ubo;

struct Ray {
  vec3 origin;
  vec3 direction;
};

vec3 rayAt(Ray r, float t) {
  return r.origin + t * r.direction;
}

float hit_sphere(vec3 center, float radius, Ray r) {
  vec3 oc = r.origin - center;
  float a = dot(r.direction, r.direction);
  float b = 2.0 * dot(oc, r.direction);
  float c = dot(oc, oc) - radius * radius;
  float discriminant = b * b - 4 * a * c;

  if (discriminant < 0.0) {
    return -1.0;
  } else {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}

vec3 rayColor(Ray r) {
  float t = hit_sphere(vec3(0.0, 0.0, -1.0), 0.5, r);

  if (t > 0.0) {
    vec3 N = normalize(rayAt(r, t) - vec3(0.0, 0.0, -1.0));
    return 0.5 * vec3(N.x + 1, N.y + 1, N.z + 1);
  }

  vec3 unit_direction = normalize(r.direction);
  t = 0.5 * (unit_direction.y + 1.0);
  return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}

void main() {
  vec2 imageSize = vec2(imageSize(targetImage));

  float u = gl_GlobalInvocationID.x / imageSize.x;
  float v = gl_GlobalInvocationID.y / imageSize.y;

  Ray r;
  r.origin = ubo.origin;
  r.direction = ubo.lowerLeftCorner + u * ubo.horizontal + v * ubo.vertical - ubo.origin;
  
  vec4 curColor = vec4(rayColor(r).xyz, 1.0);
  imageStore(targetImage, ivec2(gl_GlobalInvocationID.xy), curColor);
}