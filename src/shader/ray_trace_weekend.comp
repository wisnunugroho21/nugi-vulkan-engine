#version 460

layout(set = 0, binding = 0, rgba8) uniform image2D targetImage;

layout(set = 0, binding = 1) uniform GlobalUbo {
  vec3 origin;
  vec3 horizontal;
  vec3 vertical;
  vec3 lowerLeftCorner;
} ubo;

struct Ray {
  vec3 origin;
  vec3 direction;
};

vec3 rayColor(Ray r) {
  vec3 unit_direction = unit_vector(r.direction());
  float t = 0.5 * (unit_direction.y() + 1.0);
  return (1.0 - t) * color(1.0, 1.0, 1.0) + t * color(0.5, 0.7, 1.0);
}

void main() {
  vec2 imageSize = vec2(imageSize(targetImage));

  float u = gl_GlobalInvocationID.x / imageSize.x;
  float v = gl_GlobalInvocationID.y / imageSize.y;

  Ray r;
  r.origin = ubo.origin;
  r.direction = ubo.lowerLeftCorner + u * ubo.horizontal + v * ubo.vertical - ubo.origin;
  
  vec4 curColor = vec4(rayColor(r), 1.0);
  imageStore(targetImage, ivec2(gl_GlobalInvocationID.xy), curColor);
}